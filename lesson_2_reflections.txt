What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository it starts a hidden file that allows git to keep
a log of changes to the files within the repository. You need to initialize it
so that when you decide you want to modify and commit changes to files you leave
yourself the trail you need to be able to use the checkout and compare functions
which help productivity and help track where bugs may occur.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is the intermediate area that git defines for the files yet to
be committed to the repository that allows you to select the changes you would
like to select to be added to the repository rather than committing all of them
all at once by default allowing you more selectivity in the choice of what changes
you want committed. The working directory is the location where the files you
have modified are located and have not been saved to the repository. The staging
area is where the changes you've made are held together(or separately) before
adding them to the repository and adding them as saved changes to the file within
the git repository. The repository is the history of commits that contain all
the changes to the files within it.

How can you use the staging area to make sure you have one commit per logical
change?

It can be used to see what files have been changed and to define exactly what
file changes you want to commit, so you can keep the commits to one change or fix
per file rather than have them clutter and add too much at any given time. It
shows you the files that have been modified and what changes had taken place so
you can evaluate what changes need to be committed together and which don't.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
