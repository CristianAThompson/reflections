When would you want to use a remote repository rather than keeping all your work local?

If you needed to access your work files from home it would be simpler to use a remote 
repository than it would a local as it allows you to modify the code from wherever you
may be as long as you have an internet connection. It also gives a redundancy in case 
of local PC failure.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

In case you were working with a log of other contributors, in the case where you
are sharing your github repository with others their changes may negatively 
impact your own code and to prevent conflicts it is best to make sure the pulls
are after you have verified your own feature additions to the file so that it
won't break the file for others and their code won't impact your own performance.


Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

The difference between each is that a fork is a clone on github of a repository
that isn't necessarily yours to modify and allows you to make modifications to 
your own version of it without modifying the original repository. A clone is a 
local version of a file that has been copied from the pc to another location on 
the pc or from github to the pc for local work. And branches are the offshoots
of changes within a repository, as in when you are trying to add a feature and 
need to have your own branch of the file to allow you to work on the master file
without modifying the master for everyone who may need it as an unaltered parent
file. You use each in it's own way of creating file separation and to keep all of
the files and changes neat and tidy.

What is the benefit of having a copy of the last known state of the remote
stored locally?

It is a benefit as it allows you to see what changes have been made and can compare
them to any prior version of the code.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

If I were collaborating without git or github it would be via email with attached
folders and I feel in some respects since you would be email you could include
comprehensive emails of what changed and how it affects the final output of the
files, however it would make redundancy and previous versions of the files much 
harder to keep track of as you would have to manually keep track of all the early
versions of the file and note to yourself what changes had been made rather than
commits keeping that content easily accessible.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

You might want to make changes in a separate branch when trying to implement
a new feature or change an existing feature, the mentality behind not changing it
on the master branch is to keep the master the fully functioning version of the 
application/program. So while attempting to create something new within the project
it is best to leave the feature out until it is production ready, or in other words
when it is ready to be shown to the public. Using another branch allows you to
still collaborate and get input and feedback without affecting the state of the
original project.